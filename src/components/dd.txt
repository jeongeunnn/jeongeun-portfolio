<template>
  <div class="modal-body">
    <Form ref="form" @submit.prevent="sendEmail" id="contact" class="input-box">
      @submit="onSubmit"
      :validation-schema="schema"
      @invalid-submit="onInvalidSubmit"
    >
      <TextInput
        name="name"
        type="text"
        label="Full Name"
        placeholder="Your Name"
        success-message="Nice to meet you!"
      />
      <TextInput
        name="email"
        type="email"
        label="E-mail"
        placeholder="Your email address"
        success-message="Got it, we won't spam you!"
      />
      <TextInput
        name="password"
        type="password"
        label="Password"
        placeholder="Your password"
        success-message="Nice and secure!"
      />
      <TextInput
        name="confirm_password"
        type="password"
        label="Confirm Password"
        placeholder="Type it again"
        success-message="Glad you remembered it!"
      />
    </Form>
  </div>
  <div class="modal-footer">
    <button class="submit-btn" type="submit" form="contact" value="보내기">Submit</button>
  </div>
</template>

<script>
import { Form } from "vee-validate";
import * as Yup from "yup";
import TextInput from "./components/TextInput.vue";

export default {
  name: "App",
  components: {
    TextInput,
    Form,
  },
  setup() {
    function onSubmit(values) {
      alert(JSON.stringify(values, null, 2));
    }

    function onInvalidSubmit() {
      const submitBtn = document.querySelector(".submit-btn");
      submitBtn.classList.add("invalid");
      setTimeout(() => {
        submitBtn.classList.remove("invalid");
      }, 1000);
    }

    // Using yup to generate a validation schema
    // https://vee-validate.logaretm.com/v4/guide/validation#validation-schemas-with-yup
    const schema = Yup.object().shape({
      name: Yup.string().required(),
      email: Yup.string().email().required(),
      password: Yup.string().min(6).required(),
      confirm_password: Yup.string()
        .required()
        .oneOf([Yup.ref("password")], "Passwords do not match"),
    });

    return {
      onSubmit,
      schema,
      onInvalidSubmit,
    };
  },
};
</script>

<style>
  * {
    box-sizing: border-box;
  }

  :root {
    --primary-color: #0071fe;
    --error-color: #f23648;
    --error-bg-color: #fddfe2;
    --success-color: #21a67a;
    --success-bg-color: #e0eee4;
  }

  html,
  body {
    width: 100%;
    height: 100%;
  }

  #app {
    font-family: Avenir, Helvetica, Arial, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    color: #2c3e50;
    margin-top: 60px;

    width: 100%;
    height: 100%;
  }

  form {
    width: 300px;
    margin: 0px auto;
    padding-bottom: 60px;
  }

  .submit-btn {
    background: var(--primary-color);
    outline: none;
    border: none;
    color: #fff;
    font-size: 18px;
    padding: 10px 15px;
    display: block;
    width: 100%;
    border-radius: 7px;
    margin-top: 40px;
    transition: transform 0.3s ease-in-out;
    cursor: pointer;
  }

  .submit-btn.invalid {
    animation: shake 0.5s;
    /* When the animation is finished, start again */
    animation-iteration-count: infinite;
  }

  @keyframes shake {
    0% {
      transform: translate(1px, 1px);
    }
    10% {
      transform: translate(-1px, -2px);
    }
    20% {
      transform: translate(-3px, 0px);
    }
    30% {
      transform: translate(3px, 2px);
    }
    40% {
      transform: translate(1px, -1px);
    }
    50% {
      transform: translate(-1px, 2px);
    }
    60% {
      transform: translate(-3px, 1px);
    }
    70% {
      transform: translate(3px, 1px);
    }
    80% {
      transform: translate(-1px, -1px);
    }
    90% {
      transform: translate(1px, 2px);
    }
    100% {
      transform: translate(1px, -2px);
    }
  }

  .submit-btn:hover {
    transform: scale(1.1);
  }
  </style>



<template>
  <div class="modal-body">
    <form ref="form" @submit.prevent="sendEmail" id="contact" class="input-box">
      <div class="input-box__in">
        <input  
          type="text" 
          placeholder="보내는 분을 입력해주세요" 
          name="user_name" 
          class="input-box__item"
          v-model="name"
        />
        <span>{{ errorMessage }}</span>
        <label class="input-box__title">보내는 분</label>
      </div>
      <div class="input-box__in">
        <input 
          type="tel" 
          placeholder="'-'를 제외한 전화번호를 입력해주세요" 
          name="user_tel" 
          class="input-box__item"
          v-model="tel"
        />
        <span>{{ errorMessage }}</span>
        <label class="input-box__title">전화번호</label>
      </div>
      <div class="input-box__in">
        <input 
          type="email" 
          placeholder="이메일을 입력해주세요" 
          name="user_email" 
          class="input-box__item"
          v-model="email"
        />
        <span>{{ errorMessage }}</span>
        <label class="input-box__title">이메일</label>
      </div>
      <div class="input-box__in">
        <textarea name="message" placeholder="메세지를 입력해주세요" class="input-box__item"></textarea>
        <label class="input-box__title">메세지</label>
      </div>
    </form>
  </div>
  <div class="modal-footer">
    <input type="submit" form="contact" value="보내기" class="btn btn--primary">
  </div>
</template>
<script>
  import emailjs from '@emailjs/browser';

  import { useField } from 'vee-validate';

  /* import { reactive } from 'vue'
  import useVuelidate from '@vuelidate/core'
  import { 
    required,
    email,
    numeric,
    minLength,
    helpers
  } from '@vuelidate/validators' */

  export default {
    name: 'AppContact',
    setup() {
      // Validator function
      const isRequired = value => (value ? true : 'This field is required');
      const { value, errorMessage } = useField('field', isRequired);

      return {
        value,
        errorMessage,
      };
    },
    /* setup () {
      const state = reactive({
        name: '',
        tel: '',
        email: '',
      })
      const mustBeLearnVue = (value) => value.inclues('learnvue');

      const rules = {
        name: { 
          required, 
          minLength: minLength(2),
          mustBeLearnVue: helpers.withMessage(
            '필수입력란입니다.',
            mustBeLearnVue
          )
        },
        tel: { 
          required, 
          numeric, 
          minLength: minLength(11),
          mustBeLearnVue: helpers.withMessage(
            '필수입력란입니다.',
            mustBeLearnVue
          )
        },
        email: { 
          required, 
          email,
          mustBeLearnVue: helpers.withMessage(
            '필수입력란입니다.',
            mustBeLearnVue
          )
        }
      }

      const v$ = useVuelidate(rules, state)

      return { state, v$ }
    }, */
    methods: {
      sendEmail() {
        this.v$.$touch();
        if (this.v$.$error) return;
      
        emailjs.sendForm('service_2esgxbd', 'template_50rseqs', this.$refs.form, 'lCBUF2uvwt97SJOoh')
          .then((result) => {
            alert('메세지 발송완료했습니다.', result.text);
          }, (error) => {
            alert('메세지 발송에 실패했습니다...', error.text);
          });
      }
    },
  }
</script>
<style lang="scss" scoped>

</style>